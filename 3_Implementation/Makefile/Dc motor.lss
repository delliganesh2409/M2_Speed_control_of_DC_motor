
Dc motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000981  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000065f  00000000  00000000  00000b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000028c  00000000  00000000  00001199  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  000000ea  000000ea  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.motors_pin_config 0000000e  000000ba  000000ba  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.pwm_pin_config 0000000e  000000c8  000000c8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.motors_move_forward 0000000e  000000d6  000000d6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.timer_pwm_init 00000020  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.set_duty_cycle 00000006  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000001a  000000a0  000000a0  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.motors_pin_config:

000000ba <motors_pin_config>:
#include "inc.h"

void motors_pin_config(void){
	motors_dir_ddr_reg |=((1<<motors_RF_pin)|(1<<motors_RB_pin)|(1<<motors_LB_pin)|(1<<motors_LF_pin));
  ba:	87 b1       	in	r24, 0x07	; 7
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	87 b9       	out	0x07, r24	; 7
	motors_dir_port_reg &= ~((1<<motors_RF_pin)|(1<<motors_RB_pin)|(1<<motors_LB_pin)|(1<<motors_LF_pin));
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	08 95       	ret

Disassembly of section .text.pwm_pin_config:

000000c8 <pwm_pin_config>:
}
void pwm_pin_config(void){
	motors_pwm_ddr_reg |= ((1<<motors_pwm_R_pin)|(1<<motors_pwm_L_pin));
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 66       	ori	r24, 0x60	; 96
  cc:	8a b9       	out	0x0a, r24	; 10
	motors_pwm_port_reg |= ((1<<motors_pwm_R_pin)|(1<<motors_pwm_L_pin));
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	80 66       	ori	r24, 0x60	; 96
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	08 95       	ret

Disassembly of section .text.motors_move_forward:

000000d6 <motors_move_forward>:
}
void motors_move_forward(void){
	motors_dir_port_reg |= ((1<<motors_RF_pin)|(1<<motors_LF_pin));
  d6:	88 b1       	in	r24, 0x08	; 8
  d8:	86 60       	ori	r24, 0x06	; 6
  da:	88 b9       	out	0x08, r24	; 8
	motors_dir_port_reg &= ~((1<<motors_RB_pin)|(1<<motors_LB_pin));
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	86 7f       	andi	r24, 0xF6	; 246
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	08 95       	ret

Disassembly of section .text.timer_pwm_init:

00000080 <timer_pwm_init>:
}
void timer_pwm_init(void){
	TCCR0A_reg |= ((1<<COMA1_bit)|(1<<COMB1_bit)|(1<<WGM0_bit)|(1<<WGM1_bit));
  80:	84 b5       	in	r24, 0x24	; 36
  82:	83 6a       	ori	r24, 0xA3	; 163
  84:	84 bd       	out	0x24, r24	; 36
	TCCR0A_reg &= ~((1<<COMA0_bit)|(1<<COMB0_bit));
  86:	84 b5       	in	r24, 0x24	; 36
  88:	8f 7a       	andi	r24, 0xAF	; 175
  8a:	84 bd       	out	0x24, r24	; 36
	TCCR0B_reg |= (1<<CS1_bit);
  8c:	85 b5       	in	r24, 0x25	; 37
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	85 bd       	out	0x25, r24	; 37
	TCCR0B_reg &= ~((1<<WGM2_bit)|(1<<CS2_bit)|(1<<CS0_bit));
  92:	85 b5       	in	r24, 0x25	; 37
  94:	82 7f       	andi	r24, 0xF2	; 242
  96:	85 bd       	out	0x25, r24	; 37
	TCNT0_reg =0x00;
  98:	16 bc       	out	0x26, r1	; 38
	OCR0A_reg =0X00;
  9a:	17 bc       	out	0x27, r1	; 39
	OCR0B_reg =0x00;
  9c:	18 bc       	out	0x28, r1	; 40
  9e:	08 95       	ret

Disassembly of section .text.set_duty_cycle:

000000e4 <set_duty_cycle>:
}
void set_duty_cycle(unsigned char motor1_speed, unsigned char motor2_speed){
	OCR0A_reg = motor1_speed;
  e4:	87 bd       	out	0x27, r24	; 39
	OCR0B_reg = motor2_speed;
  e6:	68 bd       	out	0x28, r22	; 40
  e8:	08 95       	ret

Disassembly of section .text.main:

000000a0 <main>:
#include "void_function.c"

int main()
{
	unsigned char duty_cycle =125;
	pwm_pin_config();
  a0:	0e 94 64 00 	call	0xc8	; 0xc8 <pwm_pin_config>
	timer_pwm_init();
  a4:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
	motors_pin_config();
  a8:	0e 94 5d 00 	call	0xba	; 0xba <motors_pin_config>
	set_duty_cycle(duty_cycle, duty_cycle+155);
  ac:	68 e1       	ldi	r22, 0x18	; 24
  ae:	8d e7       	ldi	r24, 0x7D	; 125
  b0:	0e 94 72 00 	call	0xe4	; 0xe4 <set_duty_cycle>
	while (1)
	{
		motors_move_forward();
  b4:	0e 94 6b 00 	call	0xd6	; 0xd6 <motors_move_forward>
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <main+0x14>
